# 3. Hooks and Lifecycle

## Concept

- **Hooks** are special functions that let you “hook into” React features (like state and lifecycle) in functional components.
- The most common hooks are `useState` and `useEffect`.
- **Lifecycle** refers to the phases a component goes through: mounting, updating, and unmounting.

## Why it matters in interviews

- Hooks are the standard for managing state and side effects in modern React.
- You may be asked to fetch data, set up timers, or clean up resources.

## Example

```jsx
import { useState, useEffect } from 'react';

function Timer() {
  const [seconds, setSeconds] = useState(0);

  useEffect(() => {
    const interval = setInterval(() => setSeconds(s => s + 1), 1000);
    // Cleanup on unmount
    return () => clearInterval(interval);
  }, []);

  return <div>Timer: {seconds}s</div>;
}
```

## Key Points

- `useEffect` runs after render. The dependency array controls when it runs.
- Return a cleanup function from `useEffect` for unmounting.
- Hooks must be called at the top level, not inside loops or conditions.

## Practice Question

- Build a component that fetches data from an API when mounted and displays it.